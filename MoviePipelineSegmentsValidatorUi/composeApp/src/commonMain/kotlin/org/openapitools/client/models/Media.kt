/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.SegmentOutput

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param filepath media file path
 * @param state  media state: * `waiting_metadata` - No metadata file exists * `no_segment` - Metadata file exists, but no segments file exists  * `waiting_segment_review` - Both metadata and segments files exist but no review * `segment_reviewed` - Segments have been reviewed * `media_processing` - Processing is in progress * `media_processed` -  Processing is complete 
 * @param importedSegments imported segments from `{filepath}.segments.json`
 * @param title output title, must ends with .mp4
 * @param skipBackup skip backup step
 * @param segments segments for edit decision list output
 */
@Serializable

data class Media (

    /* media file path */
    @SerialName(value = "filepath") @Required val filepath: kotlin.String,

    /*  media state: * `waiting_metadata` - No metadata file exists * `no_segment` - Metadata file exists, but no segments file exists  * `waiting_segment_review` - Both metadata and segments files exist but no review * `segment_reviewed` - Segments have been reviewed * `media_processing` - Processing is in progress * `media_processed` -  Processing is complete  */
    @SerialName(value = "state") @Required val state: Media.State,

    /* imported segments from `{filepath}.segments.json` */
    @SerialName(value = "imported_segments") @Required val importedSegments: kotlin.collections.Map<kotlin.String, kotlin.String>,

    /* output title, must ends with .mp4 */
    @SerialName(value = "title") val title: kotlin.String? = "",

    /* skip backup step */
    @SerialName(value = "skip_backup") val skipBackup: kotlin.Boolean? = false,

    /* segments for edit decision list output */
    @SerialName(value = "segments") val segments: kotlin.collections.List<SegmentOutput>? = null

) {

    /**
     *  media state: * `waiting_metadata` - No metadata file exists * `no_segment` - Metadata file exists, but no segments file exists  * `waiting_segment_review` - Both metadata and segments files exist but no review * `segment_reviewed` - Segments have been reviewed * `media_processing` - Processing is in progress * `media_processed` -  Processing is complete 
     *
     * Values: waiting_metadata,no_segment,waiting_segment_review,segment_reviewed,media_processing,media_processed
     */
    @Serializable
    enum class State(val value: kotlin.String) {
        @SerialName(value = "waiting_metadata") waiting_metadata("waiting_metadata"),
        @SerialName(value = "no_segment") no_segment("no_segment"),
        @SerialName(value = "waiting_segment_review") waiting_segment_review("waiting_segment_review"),
        @SerialName(value = "segment_reviewed") segment_reviewed("segment_reviewed"),
        @SerialName(value = "media_processing") media_processing("media_processing"),
        @SerialName(value = "media_processed") media_processed("media_processed");
    }

}

