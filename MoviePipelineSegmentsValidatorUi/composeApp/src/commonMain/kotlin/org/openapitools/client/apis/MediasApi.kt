/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.HTTPValidationError
import org.openapitools.client.models.MediaOut
import org.openapitools.client.models.ValidateSegmentsOut

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class MediasApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Show Media
     * 
     * @param mediaStem 
     * @param sessionId 
     * @return MediaOut
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun showMediaSessionsSessionIdMediasMediaStemGet(mediaStem: kotlin.String, sessionId: kotlin.String): HttpResponse<MediaOut> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{session_id}/medias/{media_stem}".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Show Video Frame
     * 
     * @param mediaStem 
     * @param positionS 
     * @param sessionId 
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun showVideoFrameSessionsSessionIdMediasMediaStemFramesPositionSSGet(mediaStem: kotlin.String, positionS: kotlin.Double, sessionId: kotlin.String): HttpResponse<kotlin.Any> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{session_id}/medias/{media_stem}/frames/{position_s}s".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "position_s" + "}", "$positionS").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Validate Media Segments
     * 
     * @param mediaStem 
     * @param sessionId 
     * @return ValidateSegmentsOut
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun validateMediaSegmentsSessionsSessionIdMediasMediaStemValidateSegmentsPost(mediaStem: kotlin.String, sessionId: kotlin.String): HttpResponse<ValidateSegmentsOut> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sessions/{session_id}/medias/{media_stem}/validate_segments".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
