/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.HTTPValidationError
import org.openapitools.client.models.Media
import org.openapitools.client.models.SegmentCreateBody
import org.openapitools.client.models.SegmentEditBody
import org.openapitools.client.models.SegmentsDeleteBody

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class SegmentsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create Segment
     * Create a segment with 1 second duration at given position
     * @param mediaStem 
     * @param sessionId 
     * @param segmentCreateBody 
     * @return Media
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createSegmentSessionsSessionIdMediasMediaStemSegmentsPost(mediaStem: kotlin.String, sessionId: kotlin.String, segmentCreateBody: SegmentCreateBody): HttpResponse<Media> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = segmentCreateBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sessions/{session_id}/medias/{media_stem}/segments/".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete Segments
     * 
     * @param mediaStem 
     * @param sessionId 
     * @param segmentsDeleteBody 
     * @return Media
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteSegmentsSessionsSessionIdMediasMediaStemSegmentsDelete(mediaStem: kotlin.String, sessionId: kotlin.String, segmentsDeleteBody: SegmentsDeleteBody): HttpResponse<Media> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = segmentsDeleteBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/sessions/{session_id}/medias/{media_stem}/segments/".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Edit Segment
     * 
     * @param start segment start position in seconds
     * @param end segment end position in seconds
     * @param mediaStem 
     * @param sessionId 
     * @param segmentEditBody 
     * @return Media
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun editSegmentSessionsSessionIdMediasMediaStemSegmentsStartSEndSPatch(start: kotlin.Double, end: kotlin.Double, mediaStem: kotlin.String, sessionId: kotlin.String, segmentEditBody: SegmentEditBody): HttpResponse<Media> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = segmentEditBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/sessions/{session_id}/medias/{media_stem}/segments/{start}s-{end}s".replace("{" + "start" + "}", "$start").replace("{" + "end" + "}", "$end").replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Load Imported Segments
     * 
     * @param mediaStem 
     * @param detectorKey See &#x60;Show Media&#x60; / &#x60;imported_segments&#x60; keys for a list of valid detector keys.
     * @param sessionId 
     * @return Media
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun loadImportedSegmentsSessionsSessionIdMediasMediaStemSegmentsDetectorKeyImportPost(mediaStem: kotlin.String, detectorKey: kotlin.String, sessionId: kotlin.String): HttpResponse<Media> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sessions/{session_id}/medias/{media_stem}/segments/{detector_key}/import".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "detector_key" + "}", "$detectorKey").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Merge Segments
     * 
     * @param mediaStem 
     * @param sessionId 
     * @param segmentsDeleteBody 
     * @return Media
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mergeSegmentsSessionsSessionIdMediasMediaStemSegmentsMergePost(mediaStem: kotlin.String, sessionId: kotlin.String, segmentsDeleteBody: SegmentsDeleteBody): HttpResponse<Media> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = segmentsDeleteBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sessions/{session_id}/medias/{media_stem}/segments/merge".replace("{" + "media_stem" + "}", "$mediaStem").replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
