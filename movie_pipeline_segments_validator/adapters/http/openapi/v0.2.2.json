{
  "openapi": "3.1.0",
  "info": {
    "title": "movie-pipeline-segments-validator",
    "summary": "A simple API to validate detected segments and generate edit decision files for movie-pipeline",
    "description": "### Requirements\n\nA video MUST meet the following requirements to be processed by this program.\n\nGiven a video named `Channel 1_Serie Name. 'Title..._2022-12-05-2203-20.ts`:\n\n- The medatadata file MUST exist and:\n\n  - MUST have the following name : `Channel 1_Serie Name. 'Title..._2022-12-05-2203-20.ts.metadata.json`\n\n  - At least HAVE the same shape than this example:\n\n    ```json\n    {\n        \"title\": \"Serie Name\",\n        \"sub_title\": \"Serie Name : Episode Name. Série policière. 2022. Saison 1. 16/26.\",\n        \"description\": \"\"\n    }\n    ```\n\n- The result of the ```movie_pipeline detect_segments``` MIGHT exists and\n  - MUST have the following name: `Channel 1_Serie Name. 'Title..._2022-12-05-2203-20.ts.segments.json`\n\n  - MUST comply to the following schema:\n\n    ```python\n    detected_segments_schema = Schema({ str: Regex(r'(?:(?:\\d{2}:\\d{2}:\\d{2}\\.\\d{2,3})-(?:\\d{2}:\\d{2}:\\d{2}\\.\\d{2,3}),)+') })\n    ```\n\n  > **NOTE**\n  >\n  > Each key of the `.segments.json` document is the name given to the detected parts of a video that should be kept.\n  >\n  > The segments to be checked are populated from this file.\n  >\n  > Whenever you change the video you are reviewing, the currently reviewed segments that you want to keep are saved to this file.\n\n## Release History\n\n- V0.2.2\n  - Normalize episode title for extract_title_serie_episode_from_metadata title\n  - Do not load segments content when creating API session. These segments can be retrieved when getting a media.\n\n- V0.2.1\n  - Improve API performance\n\n- V0.2.0\n  - Introduce new API for headless segment validations. Documentation is available at localhost:8000/docs\n\n- V0.1.4\n  - Deprecate pysimplegui renderer\n\n- V0.1.3\n  - Create movie_pipeline_segment_validator package\n\n- V0.1.2\n  - Update the title extractor to the latest version.\n    - Given a file containing the series name and the name of each episode with the formatted episode number,\n        the title extractor can derive the formatted episode number of the series\n        from the extracted episode name of the video.\n\n- V0.1.1\n  - Add support to review a directory directly from the GUI\n\n- V0.1.0\n  - Extract segment validator from the movie-pipeline repository",
    "version": "0.2.2"
  },
  "paths": {
    "/sessions/": {
      "post": {
        "tags": [
          "sessions"
        ],
        "summary": "Create Session",
        "operationId": "create_session_sessions__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCreateBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Show Session",
        "operationId": "show_session_sessions__session_id__get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sessions"
        ],
        "summary": "Destroy Session",
        "operationId": "destroy_session_sessions__session_id__delete",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "session id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}": {
      "get": {
        "tags": [
          "medias"
        ],
        "summary": "Show Media",
        "operationId": "show_media_sessions__session_id__medias__media_stem__get",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}/validate_segments": {
      "post": {
        "tags": [
          "medias"
        ],
        "summary": "Validate Media Segments",
        "operationId": "validate_media_segments_sessions__session_id__medias__media_stem__validate_segments_post",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateSegmentsOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}/frames/{position_s}s": {
      "get": {
        "tags": [
          "medias"
        ],
        "summary": "Show Video Frame",
        "operationId": "show_video_frame_sessions__session_id__medias__media_stem__frames__position_s_s_get",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "position_s",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0,
              "title": "position in seconds"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}/segments/{detector_key}/import": {
      "post": {
        "tags": [
          "segments"
        ],
        "summary": "Load Imported Segments",
        "operationId": "load_imported_segments_sessions__session_id__medias__media_stem__segments__detector_key__import_post",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "detector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "detector key",
              "description": "See `Show Media` / `imported_segments` keys for a list of valid detector keys.",
              "examples": [
                "auto",
                "match_template",
                "crop",
                "axcorrelate_silence",
                "result_2024-12-04T23:17:11.387688"
              ]
            },
            "description": "See `Show Media` / `imported_segments` keys for a list of valid detector keys."
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}/segments/": {
      "post": {
        "tags": [
          "segments"
        ],
        "summary": "Create Segment",
        "description": "Create a segment with 1 second duration at given position",
        "operationId": "create_segment_sessions__session_id__medias__media_stem__segments__post",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentCreateBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "segments"
        ],
        "summary": "Delete Segments",
        "operationId": "delete_segments_sessions__session_id__medias__media_stem__segments__delete",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentsDeleteBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}/segments/{start}s-{end}s": {
      "patch": {
        "tags": [
          "segments"
        ],
        "summary": "Edit Segment",
        "operationId": "edit_segment_sessions__session_id__medias__media_stem__segments__start_s__end_s_patch",
        "parameters": [
          {
            "name": "start",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0,
              "description": "segment start position in seconds",
              "title": "Start"
            },
            "description": "segment start position in seconds"
          },
          {
            "name": "end",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0,
              "description": "segment end position in seconds",
              "title": "End"
            },
            "description": "segment end position in seconds"
          },
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentEditBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}/medias/{media_stem}/segments/merge": {
      "post": {
        "tags": [
          "segments"
        ],
        "summary": "Merge Segments",
        "operationId": "merge_segments_sessions__session_id__medias__media_stem__segments_merge_post",
        "parameters": [
          {
            "name": "media_stem",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Media Stem"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentsDeleteBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Media": {
        "properties": {
          "filepath": {
            "type": "string",
            "format": "file-path",
            "title": "Filepath",
            "description": "media file path",
            "examples": [
              "V:\\PVR\\Channel 1_Movie Name_2022-12-05-2203-20.ts"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "waiting_metadata",
              "no_segment",
              "waiting_segment_review",
              "segment_reviewed",
              "media_processing",
              "media_processed"
            ],
            "title": "State",
            "description": "\nmedia state:\n* `waiting_metadata` - No metadata file exists\n* `no_segment` - Metadata file exists, but no segments file exists \n* `waiting_segment_review` - Both metadata and segments files exist but no review\n* `segment_reviewed` - Segments have been reviewed\n* `media_processing` - Processing is in progress\n* `media_processed` -  Processing is complete\n"
          },
          "title": {
            "type": "string",
            "pattern": "^[\\w&àéèï'!()\\[\\], #-.:]+\\.mp4$",
            "title": "Title",
            "description": "output title, must ends with .mp4",
            "default": "",
            "examples": [
              "Movie Name, le titre long.mp4",
              "Serie Name S01E16.mp4"
            ]
          },
          "skip_backup": {
            "type": "boolean",
            "title": "Skip Backup",
            "description": "skip backup step",
            "default": false
          },
          "imported_segments": {
            "additionalProperties": {
              "type": "string",
              "pattern": "(?:(?:\\d{2}:\\d{2}:\\d{2}\\.\\d{2,3})-(?:\\d{2}:\\d{2}:\\d{2}\\.\\d{2,3}),)+"
            },
            "type": "object",
            "title": "Imported Segments",
            "description": "imported segments from `{filepath}.segments.json`",
            "examples": [
              {
                "auto": "00:00:00.000-01:05:54.840,00:42:38.980-01:49:59.300,01:05:54.840-01:49:59.300",
                "result_2024-10-05T11:40:39.732479": "00:25:26.000-00:34:06.000,00:40:10.000-01:01:23.000,01:07:34.000-01:17:59.000"
              }
            ]
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/Segment-Output"
            },
            "type": "array",
            "title": "Segments",
            "description": "segments for edit decision list output"
          }
        },
        "type": "object",
        "required": [
          "filepath",
          "state",
          "imported_segments"
        ],
        "title": "Media"
      },
      "MediaMetadata": {
        "properties": {
          "basename": {
            "type": "string",
            "title": "Basename",
            "description": "Basename of recording"
          },
          "channel": {
            "type": "string",
            "title": "Channel",
            "description": "Nom de la chaine"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Program title"
          },
          "sub_title": {
            "type": "string",
            "title": "Sub Title",
            "description": "Program subtitle or summary"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Program description"
          },
          "start_real": {
            "type": "integer",
            "title": "Start Real",
            "description": "Start time stamp of recording, UNIX epoch"
          },
          "stop_real": {
            "type": "integer",
            "title": "Stop Real",
            "description": "Stop time stamp of recording, UNIX epoch"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message"
          },
          "nb_data_errors": {
            "type": "integer",
            "title": "Nb Data Errors",
            "description": "Number of data errors during recording"
          },
          "recording_id": {
            "type": "string",
            "title": "Recording Id",
            "description": "Unique ID of recording"
          }
        },
        "type": "object",
        "required": [
          "basename",
          "channel",
          "title",
          "sub_title",
          "description",
          "start_real",
          "stop_real",
          "error_message",
          "nb_data_errors",
          "recording_id"
        ],
        "title": "MediaMetadata"
      },
      "MediaOut": {
        "properties": {
          "media": {
            "$ref": "#/components/schemas/Media",
            "description": "media"
          },
          "duration": {
            "type": "number",
            "title": "Duration",
            "description": "media duration in seconds",
            "readOnly": true
          },
          "recording_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MediaMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "media recording metadata",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "media",
          "duration",
          "recording_metadata"
        ],
        "title": "MediaOut"
      },
      "Segment-Input": {
        "properties": {
          "start": {
            "type": "number",
            "minimum": 0.0,
            "title": "Start",
            "description": "segment start position in seconds",
            "examples": [
              1526
            ]
          },
          "end": {
            "type": "number",
            "minimum": 0.0,
            "title": "End",
            "description": "segment end position in seconds",
            "examples": [
              3246
            ]
          }
        },
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "title": "Segment"
      },
      "Segment-Output": {
        "properties": {
          "start": {
            "type": "number",
            "minimum": 0.0,
            "title": "Start",
            "description": "segment start position in seconds",
            "examples": [
              1526
            ]
          },
          "end": {
            "type": "number",
            "minimum": 0.0,
            "title": "End",
            "description": "segment end position in seconds",
            "examples": [
              3246
            ]
          },
          "duration": {
            "type": "number",
            "title": "Duration",
            "description": "segment duration in seconds",
            "readOnly": true,
            "examples": [
              1720
            ]
          }
        },
        "type": "object",
        "required": [
          "start",
          "end",
          "duration"
        ],
        "title": "Segment"
      },
      "SegmentCreateBody": {
        "properties": {
          "position": {
            "type": "number",
            "minimum": 0.0,
            "title": "Position",
            "description": "segment position in seconds"
          }
        },
        "type": "object",
        "required": [
          "position"
        ],
        "title": "SegmentCreateBody"
      },
      "SegmentEditBody": {
        "properties": {
          "new_position": {
            "type": "number",
            "minimum": 0.0,
            "title": "New Position",
            "description": "segment position in seconds"
          },
          "edge": {
            "type": "string",
            "enum": [
              "start",
              "end"
            ],
            "title": "Edge",
            "description": "edge to apply new position"
          }
        },
        "type": "object",
        "required": [
          "new_position",
          "edge"
        ],
        "title": "SegmentEditBody"
      },
      "SegmentsDeleteBody": {
        "properties": {
          "segments": {
            "items": {
              "$ref": "#/components/schemas/Segment-Input"
            },
            "type": "array",
            "title": "Segments",
            "description": "segments to delete"
          }
        },
        "type": "object",
        "required": [
          "segments"
        ],
        "title": "SegmentsDeleteBody"
      },
      "Session": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "session id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "root_path": {
            "type": "string",
            "format": "directory-path",
            "title": "Root Path",
            "description": "root path for medias",
            "examples": [
              "V:\\PVR"
            ]
          },
          "medias": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Media"
            },
            "type": "object",
            "title": "Medias",
            "description": "medias to process in root_path indexed by stem (filename without extension).\n\n`imported_segments` and `segments` is empty unless you query media from `medias` or `segments` endpoints"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "root_path",
          "medias"
        ],
        "title": "Session"
      },
      "SessionCreateBody": {
        "properties": {
          "root_path": {
            "type": "string",
            "format": "directory-path",
            "title": "Root Path",
            "description": "root path for medias",
            "examples": [
              "V:\\PVR"
            ]
          }
        },
        "type": "object",
        "required": [
          "root_path"
        ],
        "title": "SessionCreateBody"
      },
      "ValidateSegmentsOut": {
        "properties": {
          "edl_path": {
            "type": "string",
            "format": "file-path",
            "title": "Edl Path",
            "description": "Movie Pipeline EDL (Edit Decision List) file location",
            "examples": [
              "V:\\PVR\\Channel 1_Movie Name_2022-12-05-2203-20.ts.yml"
            ]
          }
        },
        "type": "object",
        "required": [
          "edl_path"
        ],
        "title": "ValidateSegmentsOut"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}
